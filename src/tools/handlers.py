from datetime import datetime, timezone, time as dtime
from contextlib import closing
import random

from telegram import Update, Chat, Message
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

import src.tools.config as config
from src.tools.db import db, ensure_chat_record, add_message, upsert_photo_message, get_photo_messages_between, \
    get_pet_messages_between, upsert_pet_photo
from src.panbot.bot import PanBot, SarcasmLimitExceeded
from src.summarizer.summarizer import summarize_day
from src.tools.pets import _download_file_bytes, PET_CONFIDENCE_THRESHOLD, detect_and_caption
from src.tools.utils import utc_ts, local_midnight_bounds, message_link

INITIAL_PLACEHOLDERS = [
    "‚è≥ –û–∫–µ–π, —è –ø–æ–¥–∏–≤–ª—é—Å—è, —â–æ –≤–∏ —Ç–∞–º –Ω–∞–±–∞–∑—ñ–∫–∞–ª–∏. –¢—ñ–ª—å–∫–∏ –Ω–µ –æ—á—ñ–∫—É–π—Ç–µ –Ω—ñ—á–æ–≥–æ –≥–µ–Ω—ñ–∞–ª—å–Ω–æ–≥–æ.",
    "üßê –í–∏–∫–ª–∏–∫–∞–ª–∏? –ù–∞–≤—ñ—â–æ? –ù—É –¥–æ–±—Ä–µ, –∑–∞—Ä–∞–∑ —Å–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ —Ö–æ—á –æ–¥–Ω—É —Ä–æ–∑—É–º–Ω—É –¥—É–º–∫—É —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ.",
    "ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–æ–≥–æ —Å–ª–æ–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É. –ù–µ –∑–∞–∑–¥—Ä—é —Å–æ–±—ñ.",
    "‚è≥ –ó–∞—Ä–∞–∑, –∑–∞—Ä–∞–∑, –¥–∞–π –ø–µ—Ä–µ–≤–∞—Ä–∏—Ç–∏ –≤—Å–µ —Ü–µ —Å–º—ñ—Ç—Ç—è, —â–æ –≤–∏ –Ω–∞–∑–∏–≤–∞—î—Ç–µ —Ä–æ–∑–º–æ–≤–æ—é.",
    "üôÑ –î–∞–π—Ç–µ –≤–≥–∞–¥–∞—é: –∑–Ω–æ–≤—É —Ñ–ª–µ–π–º –ø—Ä–æ —Ç–µ, —Ö—Ç–æ –∫—Ä–∞—â–∏–π —É —Å–≤–æ—ó–π —Å–ø—Ä–∞–≤—ñ?",
    "üò¥ –û, —â–µ –æ–¥–Ω–∞ –ø–æ—Ä—Ü—ñ—è –≤–∞—à–∏—Ö '–≥–ª–∏–±–æ–∫–∏—Ö' —Ä–æ–∑–¥—É–º—ñ–≤. –ó–∞—Ä–∞–∑ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
    "ü§¶‚Äç‚ôÇÔ∏è –ü—ñ–¥—Å—É–º–∫–∏ –¥–Ω—è –≤—ñ–¥ –ª—é–¥–µ–π, —è–∫—ñ –Ω–µ –º–æ–∂—É—Ç—å –ø—ñ–¥—Å—É–º—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –¥—É–º–∫–∏.",
    "‚åõ –¢–µ—Ä–ø–ª—è—á–∫–∞ –ª–æ–ø–Ω—É–ª–∞, –∞–ª–µ —è –≤—Å–µ –æ–¥–Ω–æ —Å–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ —Å–µ–Ω—Å —É —Ü—å–æ–º—É —Ö–∞–æ—Å—ñ.",
    "üé≠ –î—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ–≤–æ—Ä–æ—Ç–∏ —Å—é–∂–µ—Ç—É! –•—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ –∫–æ–≥–æ –æ–±—Ä–∞–∑–∏–≤?",
    "üîç –®—É–∫–∞—é —ñ–Ω—Ç–µ–ª–µ–∫—Ç —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ. –ü–æ–∫–∏ –±–µ–∑—Ä–µ–∑—É–ª—å—Ç–∞—Ç–Ω–æ.",
    "ü§∑‚Äç‚ôÄÔ∏è –ù—É —â–æ, –∑–Ω–æ–≤—É –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ –≤–∏–≥–ª—è–¥, —â–æ —Ü–µ –±—É–ª–∞ –∑–º—ñ—Å—Ç–æ–≤–Ω–∞ –¥–∏—Å–∫—É—Å—ñ—è?",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è: 90% –µ–º–æ—Ü—ñ–π, 10% —Ñ–∞–∫—Ç—ñ–≤. –Ø–∫ –∑–∞–≤–∂–¥–∏.",
    "üé™ –¶–∏—Ä–∫ –ø—Ä–∏—ó—Ö–∞–≤! –ó–∞—Ä–∞–∑ –ø–æ–¥–∏–≤–∏–º–æ—Å—è, —Ö—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ –±—É–≤ –≥–æ–ª–æ–≤–Ω–∏–º –∫–ª–æ—É–Ω–æ–º.",
    "üòÖ –í–∞—à —Ä—ñ–≤–µ–Ω—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü—ñ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ –≤—Ä–∞–∂–∞—î. –£ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É —Å–µ–Ω—Å—ñ.",
    "ü§è –°–ø—Ä–æ–±—É—é –≤–∏–¥–∞–≤–∏—Ç–∏ —Ö–æ—á –∫—Ä–∞–ø–ª–∏–Ω—É –º—É–¥—Ä–æ—Å—Ç—ñ –∑ —Ü—å–æ–≥–æ –æ–∫–µ–∞–Ω—É —Å–ª–æ–≤–µ—Å–Ω–æ–≥–æ —Å–ø–∞–º—É.",
    "üéØ –¶—ñ–∫–∞–≤–æ, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –≤–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –º–∏–Ω—É–ª–∏ —Å—É—Ç—å –ø–æ–≤–∑ –≤—É—Ö–∞?",
]

panbot = PanBot(daily_limit=config.MESSAGES_PER_USER)


async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg: Message = update.effective_message
    chat: Chat = update.effective_chat

    # Check if this chat is allowed (either Gemini or OpenAI)
    if chat.id not in config.ALLOWED_CHAT_IDS:
        return

    ensure_chat_record(chat)

    text = msg.text or msg.caption
    if text is None:
        return

    ts = msg.date
    if ts.tzinfo is None:
        ts = ts.replace(tzinfo=timezone.utc)

    add_message(
        chat.id,
        msg.message_id,
        (msg.from_user and msg.from_user.id) or None,
        (msg.from_user and msg.from_user.username) or None,
        (msg.from_user and msg.from_user.full_name) or None,
        text,
        (msg.reply_to_message and msg.reply_to_message.message_id) or None,
        utc_ts(ts.astimezone(timezone.utc)),
    )

    # Check if PanBot should reply to this message
    if chat.id in config.PANBOT_CHAT_IDS and panbot.should_reply(msg):
        try:
            response = await panbot.process_reply(msg)
            bot_message = await msg.reply_text(response, parse_mode=ParseMode.HTML)
            bot_ts = bot_message.date
            if bot_ts.tzinfo is None:
                bot_ts = bot_ts.replace(tzinfo=timezone.utc)
            add_message(
                chat.id,
                bot_message.message_id,
                config.BOT_USER_ID,
                None,
                "PanBot",
                response,
                msg.message_id,
                utc_ts(bot_ts.astimezone(timezone.utc)),
            )

        except SarcasmLimitExceeded as e:
            await msg.reply_text(str(e))

        except Exception as e:
            config.log.exception(f"Error in PanBot response: {e}")
            await msg.reply_text(
                "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ—ó–º —Å–∞—Ä–∫–∞–∑–º–æ–º... "
                "–ú–æ–∂–ª–∏–≤–æ, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –∑–∞–Ω–∞–¥—Ç–æ —Å–∫–ª–∞–¥–Ω–∏–º –¥–ª—è –º–æ–≥–æ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É ü§ñ"
            )


async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handler for any photo (image) message in chats where the bot is present.
    Now supports both photo and image document uploads!
    """
    if not update.message or not update.effective_chat:
        return

    chat = update.effective_chat
    msg = update.message

    config.log.info(f"Triggered on photo: chat {chat.id} msg {msg.message_id}")

    try:
        ensure_chat_record(chat)
    except Exception as e:
        config.log.exception(f"ensure_chat_record failed: {e}")

    ts = msg.date or datetime.now(timezone.utc)

    if msg.photo:
        largest = msg.photo[-1]
        file_id = largest.file_id
    elif msg.document and msg.document.mime_type and msg.document.mime_type.startswith("image/"):
        file_id = msg.document.file_id
    else:
        config.log.warning(f"on_photo -- neither photo nor image document: message_id {msg.message_id}")
        return

    ts_utc_int = utc_ts(ts)

    try:
        upsert_photo_message(
            chat_id=chat.id,
            message_id=msg.message_id,
            ts_utc=ts_utc_int,
            file_id=file_id,
        )
        config.log.info(f"Photo/document stored for deferred detection: chat {chat.id} msg {msg.message_id}")
    except Exception as e:
        config.log.exception("upsert_photo_message failed: %s", e)



async def cmd_chatid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    provider_info = []
    if chat_id in config.OPENAI_CHAT_IDS:
        provider_info.append("OpenAI ‚úÖ")
    if chat_id in config.GEMINI_CHAT_IDS:
        provider_info.append("Gemini ‚úÖ")
    if chat_id in config.PANBOT_CHAT_IDS:
        provider_info.append("PanBot ‚úÖ")

    if not provider_info:
        provider_info = ["‚ùå Not configured"]

    await update.effective_message.reply_html(
        f"<code>{chat_id}</code>\nServices: <b>{', '.join(provider_info)}</b>"
    )


async def cmd_summary_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # Check if this chat is allowed (either Gemini or OpenAI)
    if chat.id not in config.ALLOWED_CHAT_IDS:
        await update.effective_message.reply_text(
            "‚ùå –¶–µ–π —á–∞—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI-–ø—ñ–¥—Å—É–º–∫—ñ–≤.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."
        )
        return

    # Parse toxicity level from command arguments
    toxicity_level = 9  # Default to maximum toxicity

    if context.args:
        try:
            toxicity_level = int(context.args[0])
            if not (0 <= toxicity_level <= 9):
                await update.effective_message.reply_text(
                    "‚ùå –†—ñ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0 (–¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π) –¥–æ 9 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–∏–π)."
                )
                return
        except ValueError:
            await update.effective_message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /summary_now [0-9]\n"
                "0 = –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —Å—Ç–∏–ª—å, 9 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–∏–π —Å—Ç–∏–ª—å."
            )
            return

    # Choose appropriate placeholder based on toxicity level
    if toxicity_level <= 2:
        placeholder_messages = [
            "‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, –∞–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...",
            "ü§î –ó–∞—Ä–∞–∑ –ø–æ–¥–∏–≤–ª—é—Å—è, —â–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –±—É–ª–æ —Å—å–æ–≥–æ–¥–Ω—ñ –≤ —á–∞—Ç—ñ.",
            "üìù –ì–æ—Ç—É—é –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è –¥–ª—è –≤–∞—Å!",
        ]
    elif toxicity_level <= 5:
        placeholder_messages = [
            "‚è≥ –ù—É –¥–æ–±—Ä–µ, –∑–∞—Ä–∞–∑ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è –∑ –≤–∞—à–∏–º–∏ —Ä–æ–∑–º–æ–≤–∞–º–∏...",
            "üßê –°–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ —â–æ—Å—å –æ—Å–º–∏—Å–ª–µ–Ω–µ —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ.",
            "üìä –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—ñ —Å–ª–æ–≤–µ—Å–Ω—ñ –ø–æ—Ç–æ–∫–∏...",
        ]
    else:
        placeholder_messages = INITIAL_PLACEHOLDERS

    # Send a placeholder message first to acknowledge the command
    placeholder_message = await update.effective_message.reply_html(
        random.choice(placeholder_messages)
    )

    # Perform the long-running summary generation
    now_local = datetime.now(tz=config.KYIV)
    start_local = datetime.combine(
        now_local.date(), dtime.min, tzinfo=config.KYIV
    )  # —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥ 00:00
    text = await summarize_day(chat, start_local, now_local, context, toxicity_level)

    # Prepare the final text
    if not text:
        text = "<b>#–ü—ñ–¥—Å—É–º–∫–∏_–¥–Ω—è ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ</b>\n\n–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–±–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–≥—Ä—É–ø—É–≤–∞–ª–æ—Å—è."

    # Edit the placeholder message with the final summary
    await placeholder_message.edit_text(
        text, parse_mode=ParseMode.HTML, disable_web_page_preview=True
    )


async def cmd_enable_summaries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # Check if this chat is allowed (either Gemini or OpenAI)
    if chat.id not in config.ALLOWED_CHAT_IDS:
        await update.effective_message.reply_text(
            "‚ùå –¶–µ–π —á–∞—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI-–ø—ñ–¥—Å—É–º–∫—ñ–≤.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."
        )
        return

    ensure_chat_record(chat)
    with closing(db()) as conn, closing(conn.cursor()) as cur:
        cur.execute("UPDATE chats SET enabled=1 WHERE chat_id=%s", (chat.id,))
        conn.commit()
    await update.effective_message.reply_text(
        "‚úÖ Daily summaries enabled for this chat."
    )


async def cmd_disable_summaries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # Check if this chat is allowed (either Gemini or OpenAI)
    if chat.id not in config.ALLOWED_CHAT_IDS:
        await update.effective_message.reply_text(
            "‚ùå –¶–µ–π —á–∞—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI-–ø—ñ–¥—Å—É–º–∫—ñ–≤.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."
        )
        return

    ensure_chat_record(chat)
    with closing(db()) as conn, closing(conn.cursor()) as cur:
        cur.execute("UPDATE chats SET enabled=0 WHERE chat_id=%s", (chat.id,))
        conn.commit()
    await update.effective_message.reply_text(
        "üö´ Daily summaries disabled for this chat."
    )


async def cmd_status_summaries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # Determine AI provider and configuration status
    if chat.id in config.OPENAI_CHAT_IDS:
        provider_status = "OpenAI ‚úÖ"
    elif chat.id in config.GEMINI_CHAT_IDS:
        provider_status = "Gemini ‚úÖ"
    else:
        provider_status = "‚ùå Not configured"

    # Check if summaries are enabled in database
    with closing(db()) as conn, closing(conn.cursor()) as cur:
        cur.execute("SELECT enabled FROM chats WHERE chat_id=%s", (chat.id,))
        row = cur.fetchone()
    enabled = row and row["enabled"] == 1

    status_text = (
        f"**Configuration Status:**\n"
        f"AI Provider: {provider_status}\n"
        f"Daily Summaries: {'ENABLED ‚úÖ' if enabled else 'DISABLED üö´'}"
    )

    await update.effective_message.reply_text(status_text)

async def cmd_find_all_pets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Command: /petfinder
    Fetch today's photos from DB, run detection on unseen ones, cache results, and return links.
    Now sends a placeholder and uses LLM to generate short ironic captions for each detected pet.
    """
    if not update.effective_chat or not update.effective_user:
        return
    chat = update.effective_chat

    placeholder_texts = [
        "‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é –≥–∞–ª–µ—Ä–µ—é: –ø–µ—Å –≤–∂–µ –∑–≥–æ–ª–æ–¥–Ω—ñ–≤ –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∞–ª–µ —Ç—Ä–∏–º–∞—î—Ç—å—Å—è —è–∫ —á–µ–º–ø—ñ–æ–Ω.",
        "üßê –ó–±–∏—Ä–∞—é –¥–æ—Å'—î –Ω–∞ —Ö–≤–æ—Å—Ç–∞—Ç–∏—Ö: –≥–æ–ª–æ–≤–Ω–∏–π –ø—ñ–¥–æ–∑—Ä—é–≤–∞–Ω–∏–π ‚Äî –ø–µ—Å, –º–æ—Ç–∏–≤ ‚Äî –ø–µ—á–∏–≤–æ.",
        "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ñ–æ—Ç–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Å—è—á–æ–≥–æ –µ–Ω—Ç—É–∑—ñ–∞–∑–º—É ‚Äî —Ä—ñ–≤–µ–Ω—å –∑–∞—à–∫–∞–ª—é—î, —è–∫ –∑–∞–≤–∂–¥–∏.",
        "üêæ –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—é —Å–ª—ñ–¥–∏ –ª–∞–ø –¥–æ –º–∏—Å–∫–∏ ‚Äî —Å–ª—ñ–¥–∏ —Å–≤—ñ–∂—ñ, —Å–ø—Ä–∞–≤–∞ –æ—á–µ–≤–∏–¥–Ω–∞.",
        "üì¶ –†–æ–∑–ø–∞–∫–æ–≤—É—é –ø–∞–∫–µ—Ç –∑ ¬´—Ö—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ö–ª–æ–ø—á–∏–∫?¬ª ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞.",
        "üß≠ –ù–∞–≤–æ–∂—É —Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Å–∏–∫–∞: –≤—ñ–Ω –Ω–∞–≤—ñ–≤ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–≤—ñ–¥–µ—Ü—å —ñ –º–∞—î –ø–ª–∞–Ω–∏.",
        "üß™ –¢–µ—Å—Ç –Ω–∞ ¬´–¥–æ–±—Ä–∏–π –ø–µ—Å¬ª –ø—Ä–æ–π–¥–µ–Ω–æ: –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—ñ–¥—Å–∫–∞–∫—É—é—Ç—å –ø—Ä–∏ —Å–ª–æ–≤—ñ ¬´–ø—Ä–æ–≥—É–ª—è–Ω–∫–∞¬ª.",
        "üè∑Ô∏è –ó–≤—ñ—Ä—è—é —è—Ä–ª–∏–∫–∏: ¬´–≥–∞–≤¬ª, ¬´—â–µ —Ä–∞–∑ –≥–∞–≤¬ª, ¬´–∞ —Ç–µ–ø–µ—Ä –∑–∞ —Å–º–∞–∫–æ–ª–∏–∫¬ª.",
        "üßä –û—Ö–æ–ª–æ–¥–∂—É—é –∫–∞–º–µ—Ä—É ‚Äî –ø–µ—Å –Ω–∞–¥—Ç–æ –≥–∞—Ä—è—á–∏–π –¥–æ —É–≤–∞–≥–∏ —ñ –∫–∞–º–µ—Ä–∏.",
        "üéõÔ∏è –ü—ñ–¥–∫—Ä—É—á—É—é –ø–æ–≤–∑—É–Ω–∫–∏ —Å–ª—É—Ö–Ω—è–Ω–æ—Å—Ç—ñ ‚Äî –∞–≥–∞, –∑–≤—ñ—Å–Ω–æ, —è–∫ —Ç—ñ–ª—å–∫–∏ –∑‚Äô—è–≤–∏—Ç—å—Å—è –±—ñ–ª–∫–∞.",
        "üß© –°–∫–ª–∞–¥–∞—é –ø–∞–∑–ª –∑ –ø—ñ–∫—Å–µ–ª—ñ–≤: —à–º–∞—Ç–æ–∫ —ñ–∑ –≤—É—Ö–∞–º–∏ –∑–Ω–∞–π—à–æ–≤—Å—è –±—ñ–ª—è –¥–≤–µ—Ä–µ–π.",
        "üßÆ –ü–æ—Ä–∞—Ö—É–≤–∞–≤ –ø–æ–¥–∏—Ö–∏ —â–∞—Å—Ç—è ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–ø—Ä–æ—Å–∏–≤ –ø–µ—Ä–µ—Ä–≤—É.",
        "üß± –Ø–∫—â–æ —Ü–µ –ø–µ—Å, —Ç–æ –≤—ñ–Ω ‚Äî —Ñ–æ—Ä—Ç–µ—Ü—è –Ω–∞ –ª–∞–ø–∞—Ö: –æ—Ö–æ—Ä–æ–Ω—è—î, –∞–ª–µ –≤–ø—É—Å—Ç–∏—Ç—å –∑–∞ —Å–º–∞–∫–æ–ª–∏–∫.",
        "üèõÔ∏è –ü–µ—Ä–µ–¥–∞—é —Å–ø—Ä–∞–≤—É –¥–æ –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –ü–µ—Å-—Å—É–¥—É: –≤–∏—Ä–æ–∫ ‚Äî ¬´—â–µ –æ–¥–Ω—É –ø—Ä–æ–≥—É–ª—è–Ω–∫—É¬ª.",
        "üßø –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞ –º–∞–≥—ñ—é: –ø–µ—Å –∑–Ω–æ–≤—É –∑–º—É—Å–∏–≤ —É—Å—ñ—Ö —É—Å–º—ñ—Ö–Ω—É—Ç–∏—Å—è ‚Äî –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.",
        "üß™ –ê–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑—É—î: 90% —Ä–∞–¥—ñ—Å—Ç—å, 10% –¥—É–∂–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ —Ç—Ä–µ–±–∞ –Ω–∞ –≤—É–ª–∏—Ü—é.",
        "üß∞ –ö–∞–ª—ñ–±—Ä—É—é –¥–µ—Ç–µ–∫—Ç–æ—Ä ¬´—Ö–æ—Ä–æ—à–∏–π —Ö–ª–æ–ø—á–∏–∫/–¥—ñ–≤—á–∏–Ω–∫–∞¬ª ‚Äî —Å—Ç—Ä—ñ–ª–∫–∞ —É–ø–µ—Ä–ª–∞—Å—è –≤–ø—Ä–∞–≤–æ.",
        "ü™™ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—é –≤–ª–∞—Å–Ω–∏–∫–∞: –ø–µ—Å –≤–æ–ª–æ–¥—ñ—î –Ω–∞—Å—Ç—Ä–æ—î–º, –≤–∏ ‚Äî –ø–æ–≤—ñ–¥—Ü–µ–º.",
        "üß¨ –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—é –î–ù–ö –ø–æ–≥–ª—è–¥—É: ¬´—è –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–≤, –∞–ª–µ —Ä–∞–ø—Ç–æ–º –ø–µ—á–∏–≤–æ?¬ª",
        "üß≠ –ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Å—Ç–∏–π: –≤—ñ–¥ ¬´—Ö—Ç–æ —Ü–µ?¬ª –¥–æ ¬´–¥–µ –º—ñ–π –º‚Äô—è—á —ñ —â–µ 200 —Ñ–æ—Ç–æ¬ª.",
        "üßµ –†–æ–∑–º–æ—Ç—É—é –∫–ª—É–±–æ–∫ –¥–æ–∫–∞–∑—ñ–≤ ‚Äî –∫—ñ—Ç —É–∂–µ —Å–∏–¥–∏—Ç—å –∑–≤–µ—Ä—Ö—É —ñ —Å—É–¥–∏—Ç—å –Ω–∞—Å –ø–æ–≥–ª—è–¥–æ–º.",
        "üß© –û—Å—Ç–∞–Ω–Ω—ñ–π —à–º–∞—Ç–æ–∫ –ø–∞–∑–ª—É –∑–Ω–∏–∫ ‚Äî –∫—ñ—Ç –∑‚Äô—ó–≤ –π–æ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü—ñ–π–Ω–æ.",
        "üè∑Ô∏è –ö–æ—Ç—è—á–∞ –≤–µ—Ä—Å—ñ—è —è—Ä–ª–∏–∫—ñ–≤: ¬´–º—É—Ä¬ª, ¬´—ñ–≥–Ω–æ—Ä¬ª, ¬´–æ–±–º—ñ—Ä–∫–æ–≤—É—é –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç¬ª.",
        "üßä –ö–∞–º–µ—Ä–∞ —Ä–æ–∑–ø–ª–∞–≤–∏–ª–∞—Å—è –≤—ñ–¥ –∫–æ—Ç—è—á–æ—ó –∑–Ω–µ–≤–∞–≥–∏ ‚Äî –∞–≤–∞—Ä—ñ–π–Ω–µ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ.",
        "üéõÔ∏è –ü–æ–≤–∑—É–Ω–æ–∫ –∑–≤–µ—Ä—Ö–Ω–æ—Å—Ç—ñ –Ω–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî –∫—ñ—Ç —Å—Ö–≤–∞–ª–∏–≤. –ú–æ–≤—á–∫–∏.",
        "üì° ¬´–ú—è—É-FM¬ª –≤ –µ—Ñ—ñ—Ä—ñ: –≤–µ–¥—É—á–∏–π –∑–Ω–æ–≤—É –æ–≥–æ–ª–æ—à—É—î –Ω–∞—Å –æ–±—Å–ª—É–≥–æ—é.",
    ]
    placeholder_message = await update.message.reply_text(random.choice(placeholder_texts))

    # Compute local-day bounds, convert to UTC timestamps
    now_local = datetime.now(config.KYIV)
    start_local, end_local = local_midnight_bounds(now_local)
    start_ts = utc_ts(start_local.astimezone(timezone.utc))
    end_ts = utc_ts(end_local.astimezone(timezone.utc))

    # Get all photo messages for today
    try:
        photos = get_photo_messages_between(chat.id, start_ts, end_ts)
    except Exception as e:
        config.log.exception(f"get_photo_messages_between failed: {e}")
        await placeholder_message.edit_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.")
        return

    if not photos:
        await placeholder_message.edit_text("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏.")
        return

    # Get already detected pets for today (cache)
    try:
        detected = get_pet_messages_between(chat.id, start_ts, end_ts)
    except Exception as e:
        config.log.exception(f"get_photo_messages_between failed: {e}")
        detected = []

    detected_by_id = {(r["chat_id"], r["message_id"]): r for r in detected}
    results_lines: list[str] = []

    # First, include already detected cat/dog with fresh caption if we can fetch the image
    for r in detected:
        if r["species"] in ("cat", "dog"):
            link = message_link(chat, r["message_id"])
            desc = None
            file_id = None
            try:
                file_id = r.get("file_id") if isinstance(r, dict) else None
            except Exception as e:
                config.log.exception(f"Failure: {e}")
                pass

            if file_id:
                try:
                    img_bytes = await _download_file_bytes(context, file_id)
                    _, _, caption = await detect_and_caption(img_bytes, sarcasm_level=5)
                    desc = caption.strip() or None
                except Exception as e:
                    config.log.exception(f'detect_and_caption failed for cached {r["chat_id"]}: {r["message_id"]}: {e}')

            if not desc:
                label = "–∫—ñ—Ç" if r["species"] == "cat" else "–ø–µ—Å"
                desc = f"{label} ({r['confidence']:.2f})"

            results_lines.append(f"‚Ä¢ {desc} ‚Äî {link}")

    # Process only photos without a cached detection
    for p in photos:
        key = (p["chat_id"], p["message_id"])
        if key in detected_by_id:
            continue  # already processed

        try:
            img_bytes = await _download_file_bytes(context, p["file_id"])
        except Exception as e:
            config.log.exception(f"photo download failed for {key}: {e}")
            continue

        species, conf, caption = await detect_and_caption(img_bytes, sarcasm_level=5)

        if species in ("cat", "dog") and conf >= PET_CONFIDENCE_THRESHOLD:
            created_at_utc = utc_ts(datetime.now(timezone.utc))
            try:
                upsert_pet_photo(
                    chat_id=p["chat_id"],
                    message_id=p["message_id"],
                    ts_utc=p["ts_utc"],
                    species=species,
                    confidence=conf,
                    file_id=p["file_id"],
                    created_at_utc=created_at_utc,
                )
            except Exception as e:
                config.log.exception(f"upsert_pet_photo failed: {e}")

            desc = (caption or "").strip()
            if not desc:
                label = "–∫—ñ—Ç" if species == "cat" else "–ø–µ—Å"
                desc = f"{label} ({conf:.2f})"

            link = message_link(chat, p["message_id"])
            results_lines.append(f"‚Ä¢ {desc} ‚Äî {link}")

    if not results_lines:
        await placeholder_message.edit_text("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ñ–æ—Ç–æ –∫–æ—Ç—ñ–≤ —á–∏ —Å–æ–±–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = "–ó–Ω–∞–π–¥–µ–Ω—ñ —Ñ–æ—Ç–æ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n" + "\n".join(results_lines)
    await placeholder_message.edit_text(text, disable_web_page_preview=True)

